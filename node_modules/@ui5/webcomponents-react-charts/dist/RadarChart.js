import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/dist/useConsolidatedRef';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/dist/usePassThroughHtmlProps';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';
import { ChartContainer } from '@ui5/webcomponents-react-charts/dist/components/ChartContainer';
import { ChartDataLabel } from '@ui5/webcomponents-react-charts/dist/components/ChartDataLabel';
import { PieChartPlaceholder } from '@ui5/webcomponents-react-charts/dist/PieChartPlaceholder';
import { useLegendItemClick } from '@ui5/webcomponents-react-charts/dist/useLegendItemClick';
import React, { useCallback, useMemo, forwardRef, useRef } from 'react';
import { RadarChart as RadarChart$1, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Tooltip, Legend } from 'recharts';

var useLabelFormatter = function useLabelFormatter(primaryDimension) {
  return useCallback(function (name) {
    if (primaryDimension && typeof primaryDimension.formatter === 'function') {
      return primaryDimension.formatter(name);
    }

    return name;
  }, [primaryDimension]);
};

var usePrepareDimensionsAndMeasures = function usePrepareDimensionsAndMeasures(rawDimensions, rawMeasures) {
  var dimensionDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var measureDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var dimensions = useMemo(function () {
    return rawDimensions.map(function (label) {
      return _objectSpread(_objectSpread({}, dimensionDefaults), label);
    });
  }, [rawDimensions, dimensionDefaults]);
  var measures = useMemo(function () {
    return rawMeasures.map(function (value) {
      return _objectSpread(_objectSpread({}, measureDefaults), value);
    });
  }, [rawMeasures, measureDefaults]);
  return {
    dimensions: dimensions,
    measures: measures
  };
};

var useTooltipFormatter = function useTooltipFormatter(measures) {
  return useCallback(function (value, name, props) {
    var measure = measures.find(function (_ref) {
      var accessor = _ref.accessor;
      return accessor === props.dataKey;
    });

    if (measure && typeof measure.formatter === 'function') {
      return measure.formatter(value);
    }

    return value;
  }, [measures]);
};

var defaultFormatter = function defaultFormatter(d) {
  return d;
};

var tooltipContentStyle = {
  backgroundColor: ThemingParameters.sapBackgroundColor
};
var tooltipFillOpacity = {
  fillOpacity: 0.3
}; // we need type any due to recharts typing error

var dimensionDefaults = {
  formatter: function formatter(d) {
    return d;
  }
};
var measureDefaults = {
  formatter: defaultFormatter,
  opacity: 0.5
};
/**
 * A radar or spider or web chart is a two-dimensional chart type designed to plot one or more series of values over multiple quantitative variables.
 */

var RadarChart = /*#__PURE__*/forwardRef(function (props, ref) {
  var loading = props.loading,
      dataset = props.dataset,
      noLegend = props.noLegend,
      noAnimation = props.noAnimation,
      tooltipConfig = props.tooltipConfig,
      onDataPointClick = props.onDataPointClick,
      onLegendClick = props.onLegendClick,
      onClick = props.onClick,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      ChartPlaceholder = props.ChartPlaceholder;
  var chartConfig = useMemo(function () {
    return _objectSpread({
      legendPosition: 'bottom',
      legendHorizontalAlign: 'center',
      dataLabel: true,
      polarGridType: 'circle',
      resizeDebounce: 250
    }, props.chartConfig);
  }, [props.chartConfig]);
  var chartRef = useConsolidatedRef(ref);

  var _usePrepareDimensions = usePrepareDimensionsAndMeasures(props.dimensions, props.measures, dimensionDefaults, measureDefaults),
      dimensions = _usePrepareDimensions.dimensions,
      measures = _usePrepareDimensions.measures;

  var tooltipValueFormatter = useTooltipFormatter(measures);
  var primaryDimension = dimensions[0];
  var labelFormatter = useLabelFormatter(primaryDimension);
  var primaryDimensionAccessor = primaryDimension === null || primaryDimension === void 0 ? void 0 : primaryDimension.accessor;
  var onItemLegendClick = useLegendItemClick(onLegendClick);
  var preventOnClickCall = useRef(false);
  var onClickInternal = useCallback(function (payload, event) {
    if (typeof onClick === 'function' && !preventOnClickCall.current) {
      var _payload$activePayloa, _payload$activePayloa2;

      onClick(enrichEventWithDetails(event, {
        payload: payload === null || payload === void 0 ? void 0 : (_payload$activePayloa = payload.activePayload) === null || _payload$activePayloa === void 0 ? void 0 : (_payload$activePayloa2 = _payload$activePayloa[0]) === null || _payload$activePayloa2 === void 0 ? void 0 : _payload$activePayloa2.payload,
        activePayloads: payload === null || payload === void 0 ? void 0 : payload.activePayload
      }));
    }

    if (preventOnClickCall.current) {
      preventOnClickCall.current = false;
    }
  }, [onClick, preventOnClickCall.current]);
  var onDataPointClickInternal = useCallback(function (payload, eventOrIndex) {
    if (eventOrIndex.value && onDataPointClick) {
      onDataPointClick(enrichEventWithDetails({}, {
        value: eventOrIndex.value,
        dataKey: eventOrIndex.dataKey,
        name: eventOrIndex.payload.label,
        dataIndex: eventOrIndex.index,
        payload: eventOrIndex.payload
      }));
      preventOnClickCall.current = true;
    }
  }, [onDataPointClick, preventOnClickCall.current]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onDataPointClick', 'onLegendClick', 'onClick']);
  return /*#__PURE__*/React.createElement(ChartContainer, _extends({
    dataset: dataset,
    ref: chartRef,
    loading: loading,
    Placeholder: ChartPlaceholder !== null && ChartPlaceholder !== void 0 ? ChartPlaceholder : PieChartPlaceholder,
    style: style,
    className: className,
    tooltip: tooltip,
    slot: slot,
    resizeDebounce: chartConfig.resizeDebounce
  }, passThroughProps), /*#__PURE__*/React.createElement(RadarChart$1, {
    onClick: onClickInternal,
    data: dataset,
    margin: chartConfig.margin,
    className: typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined
  }, /*#__PURE__*/React.createElement(PolarGrid, {
    gridType: chartConfig.polarGridType
  }), /*#__PURE__*/React.createElement(PolarAngleAxis, {
    dataKey: primaryDimensionAccessor,
    tickFormatter: primaryDimension === null || primaryDimension === void 0 ? void 0 : primaryDimension.formatter,
    tick: {
      fill: ThemingParameters.sapContent_LabelColor
    }
  }), /*#__PURE__*/React.createElement(PolarRadiusAxis, null), measures.map(function (element, index) {
    var _element$label, _element$color, _element$color2;

    return /*#__PURE__*/React.createElement(Radar, {
      key: element.accessor,
      activeDot: {
        onClick: onDataPointClickInternal
      },
      name: (_element$label = element.label) !== null && _element$label !== void 0 ? _element$label : element.accessor,
      dataKey: element.accessor,
      stroke: (_element$color = element.color) !== null && _element$color !== void 0 ? _element$color : "var(--sapChart_OrderedColor_".concat(index % 11 + 1, ")"),
      fill: (_element$color2 = element.color) !== null && _element$color2 !== void 0 ? _element$color2 : "var(--sapChart_OrderedColor_".concat(index % 11 + 1, ")"),
      fillOpacity: element.opacity,
      label: /*#__PURE__*/React.createElement(ChartDataLabel, {
        config: element,
        chartType: "radar",
        position: 'outside'
      }),
      isAnimationActive: noAnimation === false
    });
  }), /*#__PURE__*/React.createElement(Tooltip, _extends({
    cursor: tooltipFillOpacity,
    formatter: tooltipValueFormatter,
    contentStyle: tooltipContentStyle,
    labelFormatter: labelFormatter
  }, tooltipConfig)), !noLegend &&
  /*#__PURE__*/
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  React.createElement(Legend, {
    verticalAlign: chartConfig.legendPosition,
    align: chartConfig.legendHorizontalAlign,
    onClick: onItemLegendClick
  }), props.children));
});
RadarChart.defaultProps = {
  noLegend: false,
  noAnimation: false
};
RadarChart.displayName = 'RadarChart';

export { RadarChart };
//# sourceMappingURL=RadarChart.js.map
