{"version":3,"file":"MicroBarChart.js","sources":["../src/internal/defaults.ts","../src/components/MicroBarChart/MicroBarChart.tsx"],"sourcesContent":["export const defaultFormatter = (d) => d;\n\nexport const defaultMaxYAxisWidth = 200;\n","import { createUseStyles } from 'react-jss';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/dist/StyleClassHelper';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/dist/useConsolidatedRef';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/dist/usePassThroughHtmlProps';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { BarChartPlaceholder } from '@ui5/webcomponents-react-charts/dist/BarChartPlaceholder';\nimport { ChartContainer } from '@ui5/webcomponents-react-charts/dist/components/ChartContainer';\nimport React, { CSSProperties, FC, forwardRef, Ref, useCallback, useMemo } from 'react';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils';\nimport { IChartBaseProps } from '../../interfaces/IChartBaseProps';\nimport { IChartDimension } from '../../interfaces/IChartDimension';\nimport { IChartMeasure } from '../../interfaces/IChartMeasure';\nimport { defaultFormatter } from '../../internal/defaults';\n\ninterface MeasureConfig extends Omit<IChartMeasure, 'color'> {\n  /**\n   * array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n   */\n  colors?: CSSProperties['color'][];\n  /**\n   * Bar Opacity\n   * @default 1\n   */\n  opacity?: number;\n  /**\n   * Bar Width\n   * @default auto\n   */\n  width?: number;\n}\n\nexport interface MicroBarChartProps\n  extends Omit<\n    IChartBaseProps,\n    'noLegend' | 'onLegendClick' | 'noAnimation' | 'chartConfig' | 'children' | 'tooltipConfig'\n  > {\n  /**\n   * A object which contains the configuration of the dimension.\n   *\n   * #### Required Properties\n   * - `accessor`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * #### Optional Properties\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   *\n   */\n  dimension: IChartDimension;\n  /**\n   * An array of config objects. Each object is defining one bar in the chart.\n   *\n   * #### Required properties\n   * - `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\n   * Can also be a getter.\n   *\n   * #### Optional properties\n   *\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `colors`: array of any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n   * - `width`: bar width in pixel, defaults to `4`\n   * - `opacity`: bar opacity, defaults to `1`\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this column.\n   * - `DataLabel`: a custom component to be used for the data label\n   */\n  measure: MeasureConfig;\n  /**\n   * An optional number for the maxValue of the valueBar.\n   * Default is the highest number of the corresponding accessor in the dataset.\n   */\n  maxValue?: number;\n}\n\nconst resolveColor = (index: number, color = null) => {\n  if (color) {\n    return ThemingParameters[color] ?? color;\n  }\n  return ThemingParameters[`sapChart_Sequence_${(index % 11) + 1}`];\n};\n\nconst MicroBarChartStyles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontWeight: 'normal',\n    width: '100%',\n    height: '100%',\n    justifyContent: 'space-around'\n  },\n  barContainer: {\n    cursor: 'auto'\n  },\n  barContainerActive: {\n    '&:active': { opacity: '0.3 !important' },\n    cursor: 'pointer'\n  },\n  labelContainer: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  valueContainer: {\n    display: 'flex',\n    backgroundColor: ThemingParameters.sapContent_Placeholderloading_Background\n  },\n  valueBar: { height: '100%' },\n  label: {\n    color: ThemingParameters.sapContent_LabelColor,\n    display: 'block',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    fontSize: ThemingParameters.sapFontSmallSize,\n    maxWidth: '70%'\n  },\n  text: {\n    paddingLeft: '6px',\n    display: 'inline-block',\n    overflow: 'hidden',\n    fontSize: ThemingParameters.sapFontSmallSize,\n    boxSizing: 'border-box',\n\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    color: ThemingParameters.sapTextColor,\n    textAlign: 'right'\n  }\n};\n\nconst useStyles = createUseStyles(MicroBarChartStyles, { name: 'MicroBarChart' });\n\n/**\n * The `MicroBarChart` compares different values of the same category to each other by displaying them in a compact way.\n */\nconst MicroBarChart: FC<MicroBarChartProps> = forwardRef((props: MicroBarChartProps, ref: Ref<HTMLDivElement>) => {\n  const { loading, dataset, onDataPointClick, style, className, tooltip, slot, ChartPlaceholder } = props;\n  const classes = useStyles();\n\n  const dimension = useMemo<IChartDimension>(\n    () => ({\n      formatter: defaultFormatter,\n      ...props.dimension\n    }),\n    [props.dimension]\n  );\n  const measure: MeasureConfig = useMemo(\n    () => ({\n      formatter: defaultFormatter,\n      ...props.measure\n    }),\n    [props.measure]\n  );\n\n  const maxValue = useMemo(() => {\n    if (dataset) {\n      const maxDatasetValue = Math.max(...dataset?.map((item) => getValueByDataKey(item, measure.accessor)));\n      return props.maxValue ?? maxDatasetValue;\n    }\n    return 0;\n  }, [dataset, measure, props.maxValue]);\n  const chartRef = useConsolidatedRef<any>(ref);\n\n  const barHeight = measure?.width ? `${measure.width}px` : '4px';\n\n  const onBarClick = useCallback(\n    (item, index) => (e) => {\n      if (typeof onDataPointClick === 'function') {\n        onDataPointClick(\n          enrichEventWithDetails(e, {\n            dataKey: measure.accessor,\n            value: getValueByDataKey(item, measure.accessor),\n            payload: item,\n            dataIndex: index\n          })\n        );\n      }\n    },\n    [measure.accessor, onDataPointClick]\n  );\n  const barContainerClasses = StyleClassHelper.of(classes.barContainer);\n  if (onDataPointClick) {\n    barContainerClasses.put(classes.barContainerActive);\n  }\n  const passThroughProps = usePassThroughHtmlProps(props, ['onDataPointClick', 'onLegendClick']);\n\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={ChartPlaceholder ?? BarChartPlaceholder}\n      ref={chartRef}\n      style={style}\n      className={className}\n      tooltip={tooltip}\n      slot={slot}\n      resizeDebounce={250}\n      {...passThroughProps}\n    >\n      <div className={classes.container}>\n        {dataset?.map((item, index) => {\n          const dimensionValue = getValueByDataKey(item, dimension.accessor);\n          const measureValue = getValueByDataKey(item, measure.accessor);\n          const formattedDimension = dimension.formatter(dimensionValue);\n          let formattedMeasure: any = '';\n          if (!measure.hideDataLabel) {\n            if (measure.DataLabel) {\n              formattedMeasure = React.createElement(measure.DataLabel, {\n                value: measureValue,\n                config: measure,\n                formattedValue: measure.formatter(measureValue)\n              });\n            } else {\n              formattedMeasure = measure.formatter(measureValue);\n            }\n          }\n          return (\n            <div key={dimensionValue} className={barContainerClasses.className} onClick={onBarClick(item, index)}>\n              <div className={classes.labelContainer}>\n                <span className={classes.label} title={formattedDimension}>\n                  {formattedDimension}\n                </span>\n                <span className={classes.text} title={formattedMeasure}>\n                  {measure.hideDataLabel ? '' : formattedMeasure}\n                </span>\n              </div>\n              <div\n                className={classes.valueContainer}\n                style={{\n                  opacity: measure?.opacity ?? 1,\n                  height: barHeight\n                }}\n              >\n                <div\n                  className={classes.valueBar}\n                  style={{\n                    width: `${(measureValue / maxValue) * 100}%`,\n                    backgroundColor: resolveColor(index, measure?.colors?.[index])\n                  }}\n                />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </ChartContainer>\n  );\n});\n\nMicroBarChart.displayName = 'MicroBarChart';\n\nexport { MicroBarChart };\n"],"names":["defaultFormatter","d","resolveColor","index","color","ThemingParameters","MicroBarChartStyles","container","display","flexDirection","overflow","fontFamily","sapFontFamily","fontWeight","width","height","justifyContent","barContainer","cursor","barContainerActive","opacity","labelContainer","valueContainer","backgroundColor","sapContent_Placeholderloading_Background","valueBar","label","sapContent_LabelColor","whiteSpace","textOverflow","fontSize","sapFontSmallSize","maxWidth","text","paddingLeft","boxSizing","sapTextColor","textAlign","useStyles","createUseStyles","name","MicroBarChart","forwardRef","props","ref","loading","dataset","onDataPointClick","style","className","tooltip","slot","ChartPlaceholder","classes","dimension","useMemo","formatter","measure","maxValue","maxDatasetValue","Math","max","map","item","getValueByDataKey","accessor","chartRef","useConsolidatedRef","barHeight","onBarClick","useCallback","e","enrichEventWithDetails","dataKey","value","payload","dataIndex","barContainerClasses","StyleClassHelper","of","put","passThroughProps","usePassThroughHtmlProps","BarChartPlaceholder","dimensionValue","measureValue","formattedDimension","formattedMeasure","hideDataLabel","DataLabel","React","createElement","config","formattedValue","colors","displayName"],"mappings":"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"}