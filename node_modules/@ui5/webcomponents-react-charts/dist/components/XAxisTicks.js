import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { truncateLongLabel, getTextWidth } from '@ui5/webcomponents-react-charts/dist/Utils';
import React from 'react';

var XAxisTicks = function XAxisTicks(props) {
  var _secondYAxisConfig$co;

  var x = props.x,
      y = props.y,
      payload = props.payload,
      config = props.config,
      visibleTicksCount = props.visibleTicksCount,
      width = props.width,
      secondYAxisConfig = props.secondYAxisConfig;
  var bandWidth = width / visibleTicksCount;
  var shouldRotate = bandWidth <= 100;
  var formattedValue = config.formatter(payload.value);
  var textToDisplay = formattedValue;

  if (shouldRotate) {
    textToDisplay = truncateLongLabel(formattedValue, 11);
  } else if (getTextWidth(formattedValue) > bandWidth) {
    for (var i = "".concat(formattedValue).length; i > 0; i--) {
      textToDisplay = truncateLongLabel(formattedValue, i);

      if (getTextWidth(textToDisplay) <= bandWidth) {
        break;
      }
    }
  }

  return /*#__PURE__*/React.createElement("g", {
    style: {
      direction: 'ltr'
    },
    transform: "translate(".concat(x, ",").concat(y + (secondYAxisConfig ? 0 : 10), ")")
  }, /*#__PURE__*/React.createElement("text", {
    fill: (_secondYAxisConfig$co = secondYAxisConfig === null || secondYAxisConfig === void 0 ? void 0 : secondYAxisConfig.color) !== null && _secondYAxisConfig$co !== void 0 ? _secondYAxisConfig$co : ThemingParameters.sapContent_LabelColor,
    transform: shouldRotate ? 'rotate(-35)' : undefined,
    textAnchor: shouldRotate ? 'end' : 'middle'
  }, textToDisplay));
};

export { XAxisTicks };
//# sourceMappingURL=XAxisTicks.js.map
